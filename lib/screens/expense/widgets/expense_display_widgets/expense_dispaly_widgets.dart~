import 'package:flutter/material.dart';
import 'package:splitit/DatabaseHelper/hive_services.dart';
import '../../../../modelClass/models.dart';


class ExpenseAmountCard extends StatelessWidget {
  final Expense expense;

  const ExpenseAmountCard({
    Key? key,
    required this.expense,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(16),
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: Colors.purple.shade100),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Text(
              '₹${expense.totalAmount.toStringAsFixed(2)}',
              style: const TextStyle(
                fontSize: 36,
                fontWeight: FontWeight.bold,
                color: Colors.deepPurple,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              expense.description,
              style: const TextStyle(
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Paid by ${expense.paidByMember.name}',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ExpenseSplitDetailsCard extends StatelessWidget {
  final Expense expense;

  const ExpenseSplitDetailsCard({
    Key? key,
    required this.expense,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: Colors.purple.shade100),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Split Details',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.purple.shade700,
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.purple.shade50,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    expense.divisionMethod == DivisionMethod.equal ? 'Split Equally' : 'Custom Split',
                    style: TextStyle(
                      color: Colors.purple.shade700,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ListView.separated(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: expense.splits.length,
              separatorBuilder: (context, index) => Divider(
                color: Colors.purple.shade50,
                thickness: 1,
              ),
              itemBuilder: (context, index) => SplitListItem(
                split: expense.splits[index],
                expense: expense,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class SplitListItem extends StatelessWidget {
  final Split split;
  final Expense expense;

  const SplitListItem({
    Key? key,
    required this.split,
    required this.expense,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isPayer = split.member.phone == expense.paidByMember.phone;
    final netAmount = isPayer
        ? expense.totalAmount - split.amount
        : -split.amount;

    return ListTile(
      leading: CircleAvatar(
        backgroundColor: isPayer ? Colors.green.shade100 : Colors.purple.shade100,
        child: Icon(
          isPayer ? Icons.arrow_upward : Icons.arrow_downward,
          color: isPayer ? Colors.green : Colors.purple,
        ),
      ),
      title: Text(
        '${split.member.name}${isPayer ? ' (Paid)' : ''}',
        style: const TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 16,
        ),
      ),
      trailing: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Text(
            isPayer ? 'gets back' : 'owes',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey.shade600,
            ),
          ),
          Text(
            '₹${netAmount.abs().toStringAsFixed(2)}',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: isPayer ? Colors.green : Colors.purple,
            ),
          ),
          if (expense.divisionMethod == DivisionMethod.percentage && split.percentage != null)
            Text(
              '${split.percentage!.toStringAsFixed(1)}%',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey.shade600,
              ),
            ),
        ],
      ),
    );
  }
}

class ExpenseAdditionalInfoCard extends StatelessWidget {
  final Expense expense;

  const ExpenseAdditionalInfoCard({
    Key? key,
    required this.expense,
  }) : super(key: key);

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  Widget _buildInfoRow(String label, String value, IconData icon) {
    return Row(
      children: [
        Icon(
          icon,
          size: 20,
          color: Colors.purple.shade400,
        ),
        const SizedBox(width: 12),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              label,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey.shade600,
              ),
            ),
            Text(
              value,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(16),
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: Colors.purple.shade100),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Additional Information',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.purple.shade700,
              ),
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
              'Group',
              expense.group?.groupName ?? 'Personal Expense',
              Icons.group,
            ),
            const SizedBox(height: 12),
            _buildInfoRow(
              'Date',
              _formatDate(expense.createdAt),
              Icons.calendar_today,
            ),
            if (expense.note != null && expense.note!.isNotEmpty) ...[
              const SizedBox(height: 12),
              _buildInfoRow(
                'Note',
                expense.note!,
                Icons.note,
              ),
            ],
          ],
        ),
      ),
    );
  }
}