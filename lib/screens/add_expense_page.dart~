import 'dart:io';

import 'package:flutter/material.dart';
import 'package:splitit/DatabaseHelper/hive_services.dart';
import 'package:splitit/modelClass/models.dart';

class AddExpensePage extends StatefulWidget {
  @override
  _AddExpensePageState createState() => _AddExpensePageState();
}

class _AddExpensePageState extends State<AddExpensePage> {
  TextEditingController _descriptionController = TextEditingController();
  TextEditingController _amountController = TextEditingController();
  TextEditingController _amountControllerOnMember = TextEditingController();
  List<Member> members = [];
  List<Member> selectedMembers = [];

  List<Group> groups = []; // List to store groups
  Group? selectedGroup; // Variable to store the selected group

  String? selectedPayer; // Updated to nullable String to handle default state
  String selectedSplitOption = 'Equally';

  @override
  void initState() {
    super.initState();
    _fetchGroups(); // Fetch groups when the widget is initialized
  }

  // Fetch groups from the service
  Future<void> _fetchGroups() async {
    List<Group> fetchedGroups = await ExpenseManagerService.getAllGroups();
    setState(() {
      groups = fetchedGroups;
    });
  }

  // Toggle selection of a member
  void _toggleMemberSelection(Member member) {
    setState(() {
      if (selectedMembers.contains(member)) {
        selectedMembers.remove(member); // Deselect if already selected
      } else {
        selectedMembers.add(member); // Select if not selected
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Group Expense'),
        backgroundColor: Colors.purple,
        actions: [
          IconButton(
            icon: Icon(Icons.check),
            onPressed: () {
              // Add your save expense logic here
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'With :',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 8),

            // DropdownButton for selecting a group
            DropdownButton<Group>(
              hint: Text("Select a Group"),
              value: selectedGroup,
              onChanged: (Group? newGroup) async {
                setState(() {
                  selectedGroup = newGroup;
                  if (newGroup != null) {
                    members = newGroup.members.toList();
                    selectedPayer = null; // Reset selected payer when a new group is selected
                  }
                });
              },
              items: groups.map<DropdownMenuItem<Group>>((Group group) {
                return DropdownMenuItem<Group>(
                  value: group,
                  child: Row(
                    children: [
                      CircleAvatar(
                        radius: 20,
                        backgroundImage: group.groupImage != null
                            ? FileImage(File(group.groupImage!))
                            : null,
                        child: group.groupImage == null
                            ? const Icon(Icons.group, color: Colors.white)
                            : null,
                      ),
                      SizedBox(width: 12),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(group.groupName),
                          Text(
                            group.category ?? 'No category',
                            style: TextStyle(color: Colors.grey, fontSize: 12),
                          ),
                        ],
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),

            SizedBox(height: 20),

            // Display selected group name and image (if any)
            if (selectedGroup != null) ...[
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircleAvatar(
                    radius: 24,
                    backgroundImage: selectedGroup!.groupImage != null
                        ? FileImage(File(selectedGroup!.groupImage!))
                        : null,
                    child: selectedGroup!.groupImage == null
                        ? const Icon(Icons.group, color: Colors.white, size: 24)
                        : null,
                  ),
                  SizedBox(width: 12),
                  Text(
                    selectedGroup!.groupName,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ],

            SizedBox(height: 20),

            Row(
              children: [
                Icon(Icons.receipt_long, size: 36, color: Colors.purple),
                SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: _descriptionController,
                    decoration: const InputDecoration(
                      hintText: 'Enter a description',
                      border: UnderlineInputBorder(),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 20),

            Row(
              children: [
                const Icon(Icons.currency_rupee, size: 36, color: Colors.purple),
                const SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: _amountController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: '0.00',
                      border: UnderlineInputBorder(),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 30),

            Column(
              //mainAxisAlignment: MainAxisAlignment.center,
              children: [
                 Row(
                   children: [
                     const Text(
                      'Paid',
                      style: TextStyle(fontSize: 16),
                                     ),
                     SizedBox(width: 8),
                     Container(
                       padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                       decoration: BoxDecoration(
                         color: Colors.grey[200],
                         borderRadius: BorderRadius.circular(4),
                       ),
                       child: DropdownButton<String>(
                         hint: Text("Select Payer"),
                         value: selectedPayer,
                         underline: const SizedBox(),
                         onChanged: (String? value) {
                           setState(() {
                             selectedPayer = value!;
                           });
                         },
                         items: (selectedGroup?.members ?? [])
                             .map<DropdownMenuItem<String>>((Member member) {
                           return DropdownMenuItem<String>(
                             value: member.name, // Assuming `name` is a String field in `Member`
                             child: Text(member.name), // Display member name
                           );
                         }).toList(),
                       ),
                     ),
                   ],
                 ),

                const SizedBox(width: 8),
                Row(
                  children: [
                    const Text(
                      ' split',
                      style: TextStyle(fontSize: 16),
                    ),
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.grey[200],
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: DropdownButton<String>(
                        value: selectedSplitOption,
                        underline: SizedBox(),
                        onChanged: (value) {
                          setState(() {
                            selectedSplitOption = value!;
                          });
                        },
                        items: <String>['Equally', 'By Amount']
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Text(value),
                          );
                        }).toList(),
                      ),
                    ),
                  ],
                ),

              ],
            ),

            Expanded(
              child: ListView.builder(
                itemCount: members.length,
                itemBuilder: (context, index) {
                  final member = members[index];
                  final isSelected = selectedMembers.contains(member);

                  return ListTile(
                    leading: CircleAvatar(
                      child: Icon(Icons.person),
                    ),
                    title: Text(member.name),
                    trailing: _buildTrailingWidget(selectedSplitOption,isSelected), // Outline icon if not selected
                    onTap: () {
                      _toggleMemberSelection(member); // Toggle selection on tap
                    },
                    tileColor: isSelected ? Colors.green.withOpacity(0.1) : null, // Highlight selected tile
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildTrailingWidget(String selectedOption,bool isSelected){
    if (selectedOption == 'Equally') {
      return isSelected
          ? Icon(Icons.check_circle, color: Colors.green) // Show check icon if selected
          : Icon(Icons.check_circle_outline, color: Colors.grey);
  }
    else{
      return TextField(
        controller: _amountControllerOnMember,
        keyboardType: TextInputType.numberWithOptions(decimal: true),
        decoration: const InputDecoration(
          labelText: 'Enter Amount',
          hintText: 'e.g., 100.00',
          border: OutlineInputBorder(),
        ),
      );
    }

  }
}
